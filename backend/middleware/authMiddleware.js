//for authentification of a user, this is logic to confirm that when a token is coming in with a request header, the token is real and not generated by a hacker. 
//to validate a token you decrypt it. id was used to make the token, so if we can decrypt it with the secret key and the encrypted text, and it gives us back an id, we can then query the DB and see if there is an id matching it.

import jwt from 'jsonwebtoken'                                      // lib that assists in generating a token 
import asyncHandler from 'express-async-handler'                //express lib that handles asyncronous calls */
import Users from '../models/userModel.js'                 /* we will use this to query the DB */


const protect = asyncHandler(async (req, res, next) => { /* function called protect, FYI all routes will come through here if there is a token in the header. */
let token
if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')){          // if. in the req.header, is there a key? and does the authorization token start with 'bearer'? that is the type of token we want.  
        
    try {                                               //try catch! incase something fails
        token = req.headers.authorization.split(' ')[1]        //make a var called token, and split it via space. split gives you array,  and we want to read the second prt of it, remember indices start at 0. 
        const decoded = jwt.verify(token, process.env.JWT_SECRET)    //to decrypt toke, ask jwt to verify and also give secret key (process.env_JWT_SECRET). store in var called decoded.
        req.user = await Users.findById(decoded.id).select('-password')   // go to users model, and find a record by this ID.  it is the decoded.id. there is an id in the token.  select entire user record except password. req.user exists and this is the user for the entire application and it is part of the request. */

        next ()                            /* everything is verified and we can move on as authentification is complete */
        } catch (error) {
        res.status(401)
        throw new Error('Not Authorized, token invalid')
        }
    }
    if (!token) {                                                           //if there is no token in the header
        res.status(401)
        throw new Error('Not authorized, no token')
    }
})

 export {protect}
